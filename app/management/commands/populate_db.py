from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.utils import timezone
from decimal import Decimal
import random
from datetime import timedelta

from categories.models import Category
from sectors.models import Sector
from wastes.models import Waste
from records.models import Record


class Command(BaseCommand):
    help = 'Popula o banco de dados com dados de exemplo para teste'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='Limpa os dados existentes antes de popular',
        )

    def handle(self, *args, **options):
        if options['clear']:
            self.stdout.write('üóëÔ∏è  Limpando dados existentes...')
            Record.objects.all().delete()
            Waste.objects.all().delete()
            Sector.objects.all().delete()
            Category.objects.all().delete()
            self.stdout.write(self.style.WARNING('Dados limpos com sucesso!'))

        self.stdout.write('üöÄ Iniciando popula√ß√£o do banco de dados...')

        # Criar categorias
        self.stdout.write('üìÇ Criando categorias...')
        categories_data = [
            {'name': 'Pl√°sticos', 'description': 'Materiais pl√°sticos recicl√°veis como garrafas PET, embalagens'},
            {'name': 'Metais', 'description': 'Sucatas met√°licas, latas de alum√≠nio, ferro, cobre'},
            {'name': 'Papel e Papel√£o', 'description': 'Papel de escrit√≥rio, jornais, revistas, papel√£o'},
            {'name': 'Vidros', 'description': 'Garrafas de vidro, frascos, janelas quebradas'},
            {'name': 'Eletr√¥nicos', 'description': 'Equipamentos eletr√¥nicos, componentes, cabos'},
            {'name': 'Org√¢nicos', 'description': 'Restos de comida, folhas, materiais compost√°veis'},
            {'name': 'Madeira', 'description': 'M√≥veis velhos, paletes, restos de constru√ß√£o'},
            {'name': 'T√™xtil', 'description': 'Roupas usadas, tecidos, cal√ßados'},
        ]

        categories = []
        for cat_data in categories_data:
            category, created = Category.objects.get_or_create(
                name=cat_data['name'],
                defaults={'description': cat_data['description']}
            )
            categories.append(category)
            if created:
                self.stdout.write(f'  ‚úÖ Categoria criada: {category.name}')

        # Criar setores
        self.stdout.write('üè¢ Criando setores...')
        sectors_data = [
            {'name': 'Administra√ß√£o', 'responsible': 'Jo√£o Silva', 'location': 'Bloco A - 1¬∫ Andar'},
            {'name': 'Produ√ß√£o', 'responsible': 'Maria Santos', 'location': 'Galp√£o Principal'},
            {'name': 'Almoxarifado', 'responsible': 'Pedro Costa', 'location': 'Bloco B - T√©rreo'},
            {'name': 'Laborat√≥rio', 'responsible': 'Ana Oliveira', 'location': 'Bloco C - 2¬∫ Andar'},
            {'name': 'Manuten√ß√£o', 'responsible': 'Carlos Mendes', 'location': 'Oficina - Subsolo'},
            {'name': 'Refeit√≥rio', 'responsible': 'Lucia Ferreira', 'location': 'Bloco A - T√©rreo'},
            {'name': 'Limpeza', 'responsible': 'Roberto Lima', 'location': 'Zeladoria'},
        ]

        sectors = []
        for sector_data in sectors_data:
            sector, created = Sector.objects.get_or_create(
                name=sector_data['name'],
                defaults={
                    'responsible': sector_data['responsible'],
                    'location': sector_data['location']
                }
            )
            sectors.append(sector)
            if created:
                self.stdout.write(f'  ‚úÖ Setor criado: {sector.name}')

        # Criar res√≠duos
        self.stdout.write('‚ôªÔ∏è  Criando res√≠duos...')
        wastes_data = [
            # Pl√°sticos
            {'name': 'Garrafas PET', 'category': 'Pl√°sticos', 'weight_range': (0.5, 5.0), 'price_range': (1.20, 2.50)},
            {'name': 'Embalagens Pl√°sticas', 'category': 'Pl√°sticos', 'weight_range': (1.0, 8.0), 'price_range': (0.80, 1.80)},
            {'name': 'Sacolas Pl√°sticas', 'category': 'Pl√°sticos', 'weight_range': (0.3, 2.0), 'price_range': (0.50, 1.20)},
            
            # Metais
            {'name': 'Latas de Alum√≠nio', 'category': 'Metais', 'weight_range': (2.0, 15.0), 'price_range': (4.50, 6.20)},
            {'name': 'Sucata de Ferro', 'category': 'Metais', 'weight_range': (10.0, 50.0), 'price_range': (0.30, 0.80)},
            {'name': 'Fios de Cobre', 'category': 'Metais', 'weight_range': (1.0, 10.0), 'price_range': (15.00, 25.00)},
            
            # Papel e Papel√£o
            {'name': 'Papel de Escrit√≥rio', 'category': 'Papel e Papel√£o', 'weight_range': (5.0, 25.0), 'price_range': (0.40, 0.80)},
            {'name': 'Papel√£o', 'category': 'Papel e Papel√£o', 'weight_range': (3.0, 20.0), 'price_range': (0.35, 0.65)},
            {'name': 'Jornais e Revistas', 'category': 'Papel e Papel√£o', 'weight_range': (2.0, 12.0), 'price_range': (0.25, 0.50)},
            
            # Vidros
            {'name': 'Garrafas de Vidro', 'category': 'Vidros', 'weight_range': (5.0, 30.0), 'price_range': (0.15, 0.35)},
            {'name': 'Frascos de Conserva', 'category': 'Vidros', 'weight_range': (2.0, 15.0), 'price_range': (0.10, 0.25)},
            
            # Eletr√¥nicos
            {'name': 'Computadores Antigos', 'category': 'Eletr√¥nicos', 'weight_range': (8.0, 25.0), 'price_range': (5.00, 15.00)},
            {'name': 'Celulares', 'category': 'Eletr√¥nicos', 'weight_range': (0.2, 1.0), 'price_range': (3.00, 12.00)},
            {'name': 'Cabos e Fios', 'category': 'Eletr√¥nicos', 'weight_range': (1.0, 8.0), 'price_range': (2.00, 8.00)},
            
            # Org√¢nicos
            {'name': 'Restos de Comida', 'category': 'Org√¢nicos', 'weight_range': (5.0, 30.0), 'price_range': (0.05, 0.15)},
            {'name': 'Folhas e Galhos', 'category': 'Org√¢nicos', 'weight_range': (10.0, 50.0), 'price_range': (0.02, 0.08)},
            
            # Madeira
            {'name': 'Paletes de Madeira', 'category': 'Madeira', 'weight_range': (15.0, 40.0), 'price_range': (0.20, 0.60)},
            {'name': 'M√≥veis Velhos', 'category': 'Madeira', 'weight_range': (20.0, 80.0), 'price_range': (0.15, 0.45)},
            
            # T√™xtil
            {'name': 'Roupas Usadas', 'category': 'T√™xtil', 'weight_range': (2.0, 15.0), 'price_range': (0.50, 2.00)},
            {'name': 'Tecidos e Retalhos', 'category': 'T√™xtil', 'weight_range': (1.0, 10.0), 'price_range': (0.30, 1.50)},
        ]

        wastes = []
        for waste_data in wastes_data:
            # Encontrar categoria
            category = next((c for c in categories if c.name == waste_data['category']), None)
            if not category:
                continue
            
            # Escolher setor aleat√≥rio
            sector = random.choice(sectors)
            
            # Gerar peso e pre√ßo aleat√≥rios
            weight = round(random.uniform(*waste_data['weight_range']), 2)
            price_per_kg = round(random.uniform(*waste_data['price_range']), 2)
            
            waste, created = Waste.objects.get_or_create(
                name=waste_data['name'],
                defaults={
                    'category': category,
                    'sector': sector,
                    'weight': weight,
                    'price_per_kg': Decimal(str(price_per_kg))
                }
            )
            wastes.append(waste)
            if created:
                self.stdout.write(f'  ‚úÖ Res√≠duo criado: {waste.name} ({waste.category.name})')

        # Criar registros
        self.stdout.write('üìù Criando registros...')
        
        # Criar registros dos √∫ltimos 3 meses
        start_date = timezone.now() - timedelta(days=90)
        current_date = start_date
        
        records_created = 0
        while current_date <= timezone.now():
            # Criar 1-5 registros por dia
            daily_records = random.randint(1, 5)
            
            for _ in range(daily_records):
                waste = random.choice(wastes)
                is_entry = random.choice([True, True, True, False])  # 75% entradas, 25% sa√≠das
                
                # Para entradas: peso maior, para sa√≠das: peso menor
                if is_entry:
                    weight = round(random.uniform(1.0, 20.0), 2)
                else:
                    weight = round(random.uniform(0.5, 10.0), 2)
                
                # Varia√ß√£o de pre√ßo ¬±20%
                base_price = float(waste.price_per_kg)
                price_variation = random.uniform(0.8, 1.2)
                unit_price = round(base_price * price_variation, 2)
                  # Adicionar alguma aleatoriedade na data/hora
                record_time = current_date + timedelta(
                    hours=random.randint(8, 18),
                    minutes=random.randint(0, 59)
                )
                
                record = Record.objects.create(
                    waste=waste,
                    category=waste.category,
                    weight=Decimal(str(weight)),
                    unit_price=Decimal(str(unit_price)),
                    value=Decimal(str(weight)) * Decimal(str(unit_price)),  # Calcular valor total
                    is_entry=is_entry,
                    date=record_time
                )
                records_created += 1
            
            current_date += timedelta(days=1)
        
        self.stdout.write(f'  ‚úÖ {records_created} registros criados')

        # Estat√≠sticas finais
        self.stdout.write('\nüìä ESTAT√çSTICAS FINAIS:')
        self.stdout.write(f'  ‚Ä¢ Categorias: {Category.objects.count()}')
        self.stdout.write(f'  ‚Ä¢ Setores: {Sector.objects.count()}')
        self.stdout.write(f'  ‚Ä¢ Res√≠duos: {Waste.objects.count()}')
        self.stdout.write(f'  ‚Ä¢ Registros: {Record.objects.count()}')
        
        entries = Record.objects.filter(is_entry=True)
        exits = Record.objects.filter(is_entry=False)
        self.stdout.write(f'    - Entradas: {entries.count()}')
        self.stdout.write(f'    - Sa√≠das: {exits.count()}')
        
        total_entry_value = sum(float(r.value) for r in entries)
        total_exit_value = sum(float(r.value) for r in exits)
        self.stdout.write(f'    - Valor total de entradas: R$ {total_entry_value:.2f}')
        self.stdout.write(f'    - Valor total de sa√≠das: R$ {total_exit_value:.2f}')
        
        self.stdout.write(self.style.SUCCESS('\nüéâ Banco de dados populado com sucesso!'))
        self.stdout.write('üí° Agora voc√™ pode testar o sistema com dados realistas!')
